# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type AuthPayload {
    token: String!
    tokenExpiration: Int!
    user: User!
}

type ChatFeed {
    chatId: ID!
    chatRoomName: String!
    lastMessage: ChatMessage!
    participants: [User]!
}

type ChatMessage {
    message: String
    messageTime: Datetime
    receiverId: ID
    senderId: ID
}

type ChatRoom {
    chatId: ID
    chatMessages: [ChatMessage]
}

type FriendRequestStatus {
    needToAcceptBy: String
    status: String!
}

type Mutation {
    acceptRequest(friendId: ID!): String!
    changeProfilePicture(image: String!): Boolean!
    createFriends(friendId: ID!): String!
    savePushNotificationToken(token: String!): String!
    sendMsg(chatId: ID!, message: String!, receiverId: ID!): ChatMessage!
    signUp(confirmPassword: String!, password: String!, publicKey: Base64, username: String!): AuthPayload!
    unFriend(friendId: ID!): String!
}

type Query {
    checkIfPushNotificationIsEnabled: Boolean!
    fetchTest: String!
    getFriendRequests: [User]!
    getUserInformation(userId: ID!): User!
    getUserProfilePic(userId: ID!): String!
    loadAllChatFeed: [ChatFeed]!
    loadChatContent(chatId: ID!): [ChatMessage]!
    loadFriends(status: String!): [User]!
    login(password: String!, username: String!): AuthPayload!
    searchUser(v: String!): [User]!
    testLogin: String!
}

type Subscription {
    chatFeedContent: ChatFeed!
    chatRoomContent(chatId: ID!): ChatMessage!
}

type User {
    _id: ID
    chatId: ID
    friendRequestStatus: FriendRequestStatus
    password: String
    profilePic: String
    profilePicture: String
    publicKey: Base64!
    username: String!
}

scalar Base64

scalar Datetime
